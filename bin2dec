#!/usr/bin/env python3

import argparse
import re
import struct
import sys

parser = argparse.ArgumentParser(description='Convert binary number to decimal.')
parser.add_argument('infile', nargs='?', help="Input file. If not specified reads standard input.", type=argparse.FileType('r'), default = None if sys.stdin.isatty() else sys.stdin)
parser.add_argument('-s', '--signed', help="Signed number", action="store_true")
parser.add_argument('-w', '--wordsize', help="Word size in bits", type=int, choices = [8,16,32,64])
args = parser.parse_args()

def main():
    if args.infile:
        number = args.infile.read()
        try: 
            if not bool(re.match('^[01b]+$', number)):
                raise ValueError()
            num = int(number, 2)
            if not args.signed:
                print(num)
            else:
                if args.wordsize:
                    if args.wordsize == 8 and num <= 0xff:
                        packed = struct.unpack('=b', struct.pack('P', num)[0:1])
                    elif args.wordsize == 16 and num <= 0xffff:
                        packed = struct.unpack('=h', struct.pack('P', num)[0:2])
                    elif args.wordsize == 32 and num <= 0xffffffff:
                        packed = struct.unpack('=l', struct.pack('P', num)[0:4])
                    elif args.wordsize == 64 and num <= 0xffffffffffffffff:
                        packed = struct.unpack('=q', struct.pack('P', num))
                else:
                    print("Specify correct wordsize.")
                    return
                print(packed[0])
        except ValueError:
            print("Not a valid binary number.")
    else:
        print("Specify an input or pipe in stdin.")

if __name__ == "__main__":
    main()

